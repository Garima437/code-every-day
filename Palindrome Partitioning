class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> ans=new ArrayList<>();
       getAllParts(s,ans,new ArrayList<>());
       return ans;
    }
    private void  getAllParts(String s,List<List<String>> ans,List<String> partition){
        int n=s.length();
        if(n==0){
            ans.add(new ArrayList<>(partition));
            return;
        }
        for(int i=0;i<n;i++){
            String part=s.substring(0,i+1);
            if(isPalindrome(part)==true){
            partition.add(part);
            getAllParts(s.substring(i+1),ans,partition);
            partition.remove(partition.size()-1);
            }
   }
    }
   private boolean isPalindrome(String s){
        int i = 0, j = s.length() - 1;
        while (i < j) {
            if (s.charAt(i) != s.charAt(j)) return false;
            i++;
            j--;
        }
        return true;
   }
}
